import { test, expect } from "@playwright/test";

test.describe("Read & Write Flow", () => {
  test.use({ storageState: ".auth/user.json" });

  test("should allow a user to read, get tasks, switch tasks, and submit for analysis", async ({
    page,
  }) => {
    // 1. Navigate to the Read page and wait for content
    await page.goto("/read");
    await expect(
      page.getByRole("heading", { name: "Read & Write" }),
    ).toBeVisible({ timeout: 20000 });
    const passageTitleLocator = page.locator("article h2");
    await expect(passageTitleLocator).not.toBeEmpty();
    const passageTitle = await passageTitleLocator.innerText();

    // 2. Wait for task generation to complete
    const taskSkeleton = page.locator(
      '[data-slot="card-header"] .h-6.w-1/2',
    ); // Skeleton for JournalEditor title
    await expect(taskSkeleton).toBeVisible(); // First, wait for the loading skeleton
    await expect(taskSkeleton).not.toBeVisible({ timeout: 20000 }); // Then, wait for it to disappear

    // 3. Verify Tabs are visible and enabled
    const summaryTab = page.getByRole("tab", { name: "Summary" });
    const comprehensionTab = page.getByRole("tab", { name: "Comprehension" });
    await expect(summaryTab).toBeVisible();
    await expect(comprehensionTab).toBeVisible();
    await expect(comprehensionTab).toBeEnabled();

    // 4. Check initial JournalEditor state (Summary task)
    const expectedSummaryTitle = `Summary of: ${passageTitle}`;
    await expect(page.getByText(expectedSummaryTitle)).toBeVisible();

    // 5. Switch to Comprehension tab and verify prompt change
    await comprehensionTab.click();
    // The title of the comprehension task is generated by AI, so we look for a substring
    await expect(page.getByText(/Preguntas de Comprensi√≥n/i)).toBeVisible(); // "Comprehension Questions" in Spanish

    // 6. Write a response and submit
    const responseText =
      "This is a response to the comprehension questions. It is long enough to pass the validation check which requires at least fifty characters for a successful submission.";
    await page.locator(".ProseMirror").fill(responseText);
    await page.getByRole("button", { name: "Submit for Analysis" }).click();

    // 7. Verify navigation to the analysis page and wait for results
    await expect(page).toHaveURL(/.*\/journal\/.*/, { timeout: 20000 });
    await expect(page.getByText("Analysis in Progress...")).not.toBeVisible({
      timeout: 60000,
    });
    await expect(
      page.getByRole("heading", { name: "Key Takeaways" }),
    ).toBeVisible();
    await expect(page.getByText(responseText)).toBeVisible();
  });
});